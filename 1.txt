Q. AWS EKS Core Objects.
1. EKS Control Plane.
2. Worker Nodes & Node Groups.
3. Fargate Profiles (Serverless)
4. VPC.

Q.K8S Master components
1. Kube Controller Manager.
   Controllers: are responsible for noticing and
                responding when nodes, containers or endpoints
                go down. They make decisions to bring up new
                containers in such cases.
   Node Controller: Responsible for noticing and responding
                    when nodes go down.
   Replication Controller: Responsible for maintaining the correct number of pods 
				                   of pods for every replication
				                   controller object in the system.
   Endpoint Controller: Populates the Endpoints object (that is,
			                  joins Services & Pods)
   Service Account & Token Controller: Creates default accounts and API access
                                       for new namespaces.
2. Cloud controller manager.
   Kubernetes control plane component that embeds cloud-specific control logic.
   It only runs controllers that are specific to your cloud provider.
   On-premise K8s cluster will not have this component.
   Node Controller: For checking the cloud provider to determine if a node
                 has been deleted in the cloud after it stops responding.
   Route Controller: For setting up routes in the underlying cloud infrastructure
   Service Controller: For creating, updating and deleting cloud provider load balancer.

3. Kube-apiserver
   It acts as frontend for the Kubernetes control plane. it exposes the K8s API.
   CLItools (like kubectl), Users and even Mater components (scheduler, controller manager, etcd)
   and Worker node components like (Kubelet) everything talk
   with API server.
4. etcd
   Consistent and highly-available key value store used as Kubernetes' backing store for all cluster data. It stores all the masters and worker node information.
5. Kube-scheduler.
    Schedulre is responsible for distributing containers across multiple nodes. 
    It watches for newly created Pods with no assigned node, and selects a node for them to run on.
6. Container Runtime(Docker)


Q. K8s Worker Node.
1. Kubelet
	Kubelet is the agent that runs on every node in the cluster.
	This agent is responsible for making sure that containers are running in Pos on a node.
2. Kube-Proxy.
	It is a network proxy that runs on each node in your cluster.
	It maintains network rules on nodes.
	In short, these network rules allow network communication to your Pods from network sessions inside or outside of your cluster.
3. Container Runtime(Docker)
	Container Runtime is the underlying software where we run all these kubernetes components.
	Types of container are Docker, rkt, container-d etc. 

K8s Fundamentals:
1. Pod: A Pod is a single instance of an application.
        A POD is the smallest object, that you can create in K8s.
2. ReplicaSet: A ReplicaSet will maintain a stable set of replica Pods running at any given time.
               In short, it is often used to guarantee the availability of a specifies number of identical Pods.
3. Deployment: A Deployment runs multiple replicas of your application and
               automatically replaces any instances that faile or become
               unresponsive. Rollout & rollback chnages to applications.
               Deployments are well-suited for stateless applications.
4. Services:   A Service is an abstraction for pods, providing a stable, so called VIP address.
               In simple terms, service sits infront of a POD and acts as a 
               load balancer.
	       
K8s- Service-NodePort
We can expose an application running on a set
of PODS using differnt types of Services available in K8s:
ClusterIP
NodePort
LoadBalancer


Kubernetes-ReplicaSet
* A ReplicaSet's purpose is to maintain a
  stable set of replica Pods running at
  any given time.
* If our application crashes (any pod dies),
  replicaset will recreate the pod immediately
  to ensure at any given time.
* LOAD BALANCING.
* To avoid overloading of traffic to single pod
  we can use load balancing.
* Kubernetes provides pod load balancing out of the
  pods which are part of a ReplicaSet.
* Labels & Selectors are the key items which ties all
  3 together (Pod, ReplicaSet & Service), we will know
  in detail when we are writing YAMLmanifests for these
  objects
  * Scaling
* When for the number of existing pods, Kubernetes
  enables us to easily scale up our application,
  adding additional pods as needed.
* This is goig to be sealess and super quick.

Kubernetes-Deployment
* Create a deployment to rollout a ReplicaSet.
* Updating the Deployment
* Rolling Back a Deployment
* Scaling a Deployment.
* Pausing and Resuming a Deployment.
* Deployment Status.
* Clean up Policy.
* Canary Deployments.

Kubernetes-Services
* ClusterIP:
  Used for communication between applications inside K8s cluster
  (Frontened application accessing backend application)
*NodePort:
  Used for accessing applications outside of K8s cluster using Worker
  Node Ports (Example: Accessing Frontened application on browser)
* LoadBalancer:
  Primarily for cloud Providers to intergrate with their Load Balancer
  services (Example: Aws ELastic Load Balancer)
* Ingress:
  Ingress is an adavanced load balancer which provides Context path
  based routing, SSL, SSL redirect and many more(AWS ALB)
* ExternalName:
  To access externally hosted apps in K8s cluster (Example: Access AWS
  RDS Database endpoint by application present inside K8s cluster)
  
